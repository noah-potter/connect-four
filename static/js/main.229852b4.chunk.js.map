{"version":3,"sources":["utils/enums.ts","utils/consts.ts","utils/chips.ts","data/Chip.ts","utils/guid.ts","components/ChipContainer.tsx","components/CellContainer.tsx","components/Board.tsx","utils/players.ts","components/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayerColor","GameState","playerToChipColor","Red","Blue","Page","playerWonToGameState","player","RedPlayerWins","BluePlayerWins","Error","getPlacementCell","board","column","cellsInColumn","emptyCell","i","length","cell","chip","cellHasPlayerChip","Chip","_player","id","isPlacing","row","place","_row","_column","this","replace","c","r","Math","random","toString","Root","styled","animated","div","Sprite","props","adjustForOffset","position","columnWidth","calculateLeftForColumn","calculateTopForRow","ChipContainer","targetColumn","top","left","useSpring","opacity","from","style","CellOutline","chipSize","showAfterImage","afterImagePlayer","CellContainer","hideOutline","index","outlineProps","min","transform","delay","Columns","Column","SelectionOverlay","SelectionColumn","Board","afterImageRow","afterImageCol","firstPlayerColor","setPage","useMemo","result","col","push","undefined","useState","hoveredColumn","setHoveredColumn","currentPlayer","setCurrentPlayer","placementChip","setPlacementChip","canPlay","setCanPlay","mouseInArea","setMouseInArea","afterImageCell","chips","chipsInBoard","flat","map","filter","useEffect","setTimeout","cellStartAnimationDuration","gameEnded","finalMessage","window","confirm","resetBoard","PlayerSelection","onSelectColumn","hasTied","Tie","Playing","getGameState","nextPlayer","columnIndex","key","rowIndex","Boolean","onMouseEnter","onMouseLeave","_","onClick","PageContainer","Title","Buttons","ColorButton","button","Routes","page","setFirstPlayerColor","playerSelectionProps","to","pageComponent","onSelectColor","color","Game","GlobalStyle","createGlobalStyle","GameArea","App","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.229852b4.chunk.js","sourcesContent":["export enum PlayerColor {\r\n  Red = 'red',\r\n  Blue = 'blue',\r\n}\r\n\r\nexport const playerToChipColor = {\r\n  [PlayerColor.Red]:\r\n    'linear-gradient(48deg,rgba(255,14,14,1) 0%,rgb(255, 169, 62) 100%)',\r\n  [PlayerColor.Blue]:\r\n    'linear-gradient(48deg, rgba(55,34,255,1) 0%, rgba(71,169,255,1) 100%)',\r\n}\r\n\r\nexport const playerToChipBoxShadow = {\r\n  [PlayerColor.Red]: 'inset 0 0 20px 0px #fb1100',\r\n  [PlayerColor.Blue]: 'inset 0 0 20px 0px #3b41fe',\r\n}\r\n\r\nexport enum GameState {\r\n  Playing = 'playing',\r\n  RedPlayerWins = 'first player wins',\r\n  BluePlayerWins = 'second player wins',\r\n  Tie = 'tie',\r\n}\r\n\r\nexport const playerWonToGameState = (player: PlayerColor) => {\r\n  if (player === PlayerColor.Red) {\r\n    return GameState.RedPlayerWins\r\n  } else if (player === PlayerColor.Blue) {\r\n    return GameState.BluePlayerWins\r\n  }\r\n\r\n  throw new Error('Invalid player given')\r\n}\r\n\r\nexport enum Page {\r\n  PlayerSelection = 'player selection',\r\n  Game = 'game',\r\n}\r\n","export const columnWidth = 90\r\nexport const chipSize = 70\r\nexport const cellStartAnimationDuration = 25 // Delay in microseconds between starting the next animation\r\n","import { Cell } from './types'\r\nimport { PlayerColor, GameState, playerWonToGameState } from './enums'\r\n\r\nexport const getPlacementCell = (\r\n  board: Cell[][],\r\n  column: number\r\n): Cell | null => {\r\n  const cellsInColumn = board[column]\r\n\r\n  let emptyCell = null\r\n\r\n  // column is top down, and I want to do a bottom up search for an empty cell\r\n  for (var i = cellsInColumn.length - 1; i >= 0; i--) {\r\n    const cell = cellsInColumn[i]\r\n\r\n    if (!cell.chip) {\r\n      emptyCell = cell\r\n      break\r\n    }\r\n  }\r\n\r\n  return emptyCell\r\n}\r\n\r\nexport const resetBoard = (board: Cell[][]) => {\r\n  for (let col = 0; col < 7; col++) {\r\n    for (let row = 0; row < 6; row++) {\r\n      board[col][row].chip = undefined\r\n    }\r\n  }\r\n}\r\n\r\nconst cellHasPlayerChip = (cell: Cell, player: PlayerColor) => {\r\n  return cell.chip && cell.chip.player === player\r\n}\r\n\r\n// Brute force the solution. Not the most efficient but pretty simple to implement\r\n// and slightly optimized to not check outside the board\r\nexport const getGameState = (board: Cell[][]): GameState => {\r\n  // Look for a top left, bottom right diagonal win\r\n  for (let col = 0; col <= 3; col++) {\r\n    for (let row = 0; row <= 2; row++) {\r\n      let cell = board[col][row]\r\n\r\n      if (cell.chip) {\r\n        let player = cell.chip.player\r\n\r\n        if (\r\n          cellHasPlayerChip(board[col + 1][row + 1], player) &&\r\n          cellHasPlayerChip(board[col + 2][row + 2], player) &&\r\n          cellHasPlayerChip(board[col + 3][row + 3], player)\r\n        ) {\r\n          return playerWonToGameState(player)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Look for a top right, bottom left diagonal win\r\n  for (let col = 3; col <= 6; col++) {\r\n    for (let row = 0; row <= 2; row++) {\r\n      let cell = board[col][row]\r\n\r\n      if (cell.chip) {\r\n        let player = cell.chip.player\r\n\r\n        if (\r\n          cellHasPlayerChip(board[col - 1][row + 1], player) &&\r\n          cellHasPlayerChip(board[col - 2][row + 2], player) &&\r\n          cellHasPlayerChip(board[col - 3][row + 3], player)\r\n        ) {\r\n          return playerWonToGameState(player)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Look for a vertical win\r\n  for (let col = 0; col < 7; col++) {\r\n    for (let row = 0; row <= 2; row++) {\r\n      let cell = board[col][row]\r\n\r\n      if (cell.chip) {\r\n        let player = cell.chip.player\r\n\r\n        if (\r\n          cellHasPlayerChip(board[col][row + 1], player) &&\r\n          cellHasPlayerChip(board[col][row + 2], player) &&\r\n          cellHasPlayerChip(board[col][row + 3], player)\r\n        ) {\r\n          return playerWonToGameState(player)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Look for a horizontal win\r\n  for (let row = 0; row < 6; row++) {\r\n    for (let col = 0; col <= 3; col++) {\r\n      let cell = board[col][row]\r\n\r\n      if (cell.chip) {\r\n        let player = cell.chip.player\r\n\r\n        if (\r\n          cellHasPlayerChip(board[col + 1][row], player) &&\r\n          cellHasPlayerChip(board[col + 2][row], player) &&\r\n          cellHasPlayerChip(board[col + 3][row], player)\r\n        ) {\r\n          return playerWonToGameState(player)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check if game board full for tie\r\n  let hasTied = true\r\n\r\n  for (let col = 0; col < 7; col++) {\r\n    for (let row = 0; row < 6; row++) {\r\n      let cell = board[col][row]\r\n\r\n      if (!cell.chip) {\r\n        hasTied = false\r\n      }\r\n    }\r\n  }\r\n\r\n  if (hasTied) {\r\n    return GameState.Tie\r\n  }\r\n\r\n  return GameState.Playing\r\n}\r\n","import { PlayerColor } from '../utils/enums'\r\nimport { getRandomGuid } from '../utils/guid'\r\n\r\n// Colored chips the players place on the board\r\nexport default class Chip {\r\n  id: string\r\n  isPlacing: boolean = true\r\n  row: number | null = null\r\n  column: number | null = null\r\n  player: PlayerColor\r\n\r\n  constructor(_player: PlayerColor) {\r\n    // The id helps keep component keys unique when rendering the chips\r\n    this.id = getRandomGuid()\r\n    this.player = _player\r\n  }\r\n\r\n  place = (_row: number, _column: number) => {\r\n    this.isPlacing = false\r\n    this.row = _row\r\n    this.column = _column\r\n  }\r\n}\r\n","// https://stackoverflow.com/a/2117523\r\nexport const getRandomGuid = () => {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c == 'x' ? r : (r & 0x3) | 0x8\r\n    return v.toString(16)\r\n  })\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useSpring, animated } from 'react-spring'\r\nimport Chip from '../data/Chip'\r\nimport { columnWidth, chipSize } from '../utils/consts'\r\nimport {\r\n  PlayerColor,\r\n  playerToChipColor,\r\n  playerToChipBoxShadow,\r\n} from '../utils/enums'\r\n\r\nconst Root = styled(animated.div)`\r\n  position: absolute;\r\n  height: ${columnWidth}px;\r\n  width: ${columnWidth}px;\r\n  border-radius: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Sprite = styled(animated.div)<{ player: PlayerColor }>`\r\n  background: ${(props) => playerToChipColor[props.player]};\r\n  height: ${chipSize}px;\r\n  width: ${chipSize}px;\r\n  border-radius: 100%;\r\n`\r\n\r\n// This takes the position the middle of the chip should be at and converts it to the origin position of the chip\r\nconst adjustForOffset = (position: number) => {\r\n  return position - columnWidth / 2\r\n}\r\n\r\n// The calculates the position of the middle of the given column\r\nconst calculateLeftForColumn = (column: number) => {\r\n  return column * columnWidth + columnWidth / 2\r\n}\r\n\r\n// The calculates the position of the middle of the given row\r\nconst calculateTopForRow = (row: number) => {\r\n  return row * columnWidth + columnWidth / 2\r\n}\r\n\r\ntype Props = {\r\n  chip: Chip\r\n  targetColumn: number\r\n}\r\n\r\nexport const ChipContainer: React.FC<Props> = ({ chip, targetColumn }) => {\r\n  let top = 0\r\n  let left = 0\r\n\r\n  if (!chip.isPlacing && chip.column !== null && chip.row !== null) {\r\n    // Chip is placed and will move to the correct position\r\n    left = calculateLeftForColumn(chip.column)\r\n    top = calculateTopForRow(chip.row)\r\n  } else if (chip.isPlacing) {\r\n    // Chip is in the top row waiting to be placed. It follows the column the player is hovering on\r\n    left = calculateLeftForColumn(targetColumn)\r\n    top = calculateTopForRow(-1)\r\n  }\r\n\r\n  left = adjustForOffset(left)\r\n  top = adjustForOffset(top)\r\n\r\n  const props = useSpring({\r\n    top,\r\n    left,\r\n    opacity: 1,\r\n    from: {\r\n      left: adjustForOffset(calculateLeftForColumn(3)),\r\n      top: adjustForOffset(calculateTopForRow(-1)),\r\n      opacity: 0,\r\n    },\r\n  })\r\n\r\n  let style = {}\r\n\r\n  // The horizontal position should be snapped to when the chip is placed so it doesn't\r\n  // move through the columns in an unrealistic diagonal path. I'd use react-spring but it can't recalculate\r\n  // the spring to ignore an attribute based on a dynamic flag like this. So I manually set it here\r\n  if (!chip.isPlacing) {\r\n    style = {\r\n      ...props,\r\n      left,\r\n    }\r\n  } else {\r\n    style = {\r\n      ...props,\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Root style={style}>\r\n      <Sprite player={chip.player} />\r\n    </Root>\r\n  )\r\n}\r\n\r\nexport default ChipContainer\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { animated, useSpring } from 'react-spring'\r\nimport {\r\n  columnWidth,\r\n  chipSize,\r\n  cellStartAnimationDuration,\r\n} from '../utils/consts'\r\nimport { Position } from '../utils/types'\r\nimport { PlayerColor } from '../utils/enums'\r\n\r\nconst backgroundColor = `white`\r\nconst border = '2px solid #d1d1d1'\r\n\r\n// The board is specifically styled to hide the cell as it falls through the board\r\n// similar to a read connect four board\r\nconst Root = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: ${columnWidth}px;\r\n  width: ${columnWidth}px;\r\n  background: radial-gradient(\r\n    circle,\r\n    rgba(0, 0, 0, 0) 0px,\r\n    rgba(0, 0, 0, 0) 32px,\r\n    ${backgroundColor} 33px,\r\n    ${backgroundColor} 100%\r\n  );\r\n`\r\n\r\ninterface CellOutlineProps {\r\n  showAfterImage: boolean\r\n  afterImagePlayer: PlayerColor\r\n}\r\n\r\nconst CellOutline = styled(animated.div)<CellOutlineProps>`\r\n  border: ${border};\r\n  width: ${chipSize - 4}px;\r\n  height: ${chipSize - 4}px;\r\n  border-radius: 100%;\r\n  transition: 300ms background-color;\r\n  background-color: ${({ showAfterImage, afterImagePlayer }) => {\r\n    if (showAfterImage) {\r\n      if (afterImagePlayer === PlayerColor.Red) {\r\n        return '#ff4a2073'\r\n      } else {\r\n        return '#3d5aff52'\r\n      }\r\n    }\r\n  }};\r\n`\r\n\r\ntype Props = {\r\n  position: Position\r\n  hideOutline: boolean\r\n  showAfterImage: boolean\r\n  afterImagePlayer: PlayerColor\r\n}\r\n\r\nexport const CellContainer: React.FC<Props> = ({\r\n  position,\r\n  hideOutline,\r\n  showAfterImage,\r\n  afterImagePlayer,\r\n}) => {\r\n  // Calculate row and column from bottom left for animation purpose\r\n  const column = position.column\r\n  const row = 5 - position.row\r\n  const index = row * 7 + column\r\n  const total = 7 * 6\r\n\r\n  // The cells fade into view in order from bottom left to top right\r\n  // The cells also remove the outline if a piece is placed, it just looks better to me that way\r\n  const outlineProps = useSpring({\r\n    opacity: hideOutline ? 0 : 1 - Math.min(1, index / total - 0.5),\r\n    transform: 'translateY(0px)',\r\n    from: {\r\n      opacity: 0,\r\n      transform: 'translateY(-20px)',\r\n    },\r\n    delay: index * cellStartAnimationDuration,\r\n  })\r\n\r\n  return (\r\n    <Root>\r\n      <CellOutline\r\n        style={outlineProps}\r\n        showAfterImage={showAfterImage}\r\n        afterImagePlayer={afterImagePlayer}\r\n      />\r\n    </Root>\r\n  )\r\n}\r\n\r\nexport default CellContainer\r\n","import React, { Fragment, useState, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { Cell } from '../utils/types'\r\nimport { PlayerColor, GameState, Page } from '../utils/enums'\r\nimport { cellStartAnimationDuration } from '../utils/consts'\r\nimport { getPlacementCell, getGameState, resetBoard } from '../utils/chips'\r\nimport { getNextPlayer } from '../utils/players'\r\n\r\nimport Chip from '../data/Chip'\r\n\r\nimport ChipContainer from './ChipContainer'\r\nimport CellContainer from './CellContainer'\r\n\r\nconst Root = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n`\r\n\r\nconst Columns = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Column = styled.div`\r\n  z-index: 1;\r\n`\r\n\r\nconst SelectionOverlay = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 2;\r\n`\r\n\r\nconst SelectionColumn = styled.div`\r\n  cursor: pointer;\r\n  flex: 1 1 auto;\r\n  border-radius: 8px;\r\n  transition: 300ms background-color;\r\n  :hover {\r\n    background-color: #00000017;\r\n  }\r\n`\r\n\r\ntype Props = {\r\n  firstPlayerColor: PlayerColor\r\n  setPage: (page: Page) => void\r\n}\r\n\r\nexport const Board: React.FC<Props> = ({ firstPlayerColor, setPage }) => {\r\n  // Board is built in columns from left to right and rows top to bottom\r\n  let board: Cell[][] = useMemo(() => {\r\n    let result: Cell[][] = []\r\n\r\n    for (let col = 0; col < 7; col++) {\r\n      result.push([])\r\n\r\n      for (let row = 0; row < 6; row++) {\r\n        const cell = {\r\n          position: {\r\n            row: row,\r\n            column: col,\r\n          },\r\n          chip: undefined,\r\n        } as Cell\r\n\r\n        result[col].push(cell)\r\n      }\r\n    }\r\n\r\n    return result\r\n  }, [])\r\n\r\n  // Track which column the player is hovering for placement cell and after image\r\n  const [hoveredColumn, setHoveredColumn] = useState(3)\r\n  const [currentPlayer, setCurrentPlayer] = useState(firstPlayerColor)\r\n  // The chip at the top of the board which shows which player is about to place a chip and where\r\n  const [placementChip, setPlacementChip] = useState(new Chip(currentPlayer))\r\n  // Control when the player can play to handle waiting for initial setup to be done and when game ends\r\n  const [canPlay, setCanPlay] = useState(false)\r\n  // Only show the after image when the player is mousing over the board\r\n  const [mouseInArea, setMouseInArea] = useState(false)\r\n\r\n  let afterImageRow: number\r\n  let afterImageCol: number\r\n\r\n  const afterImageCell = getPlacementCell(board, hoveredColumn)\r\n\r\n  if (afterImageCell) {\r\n    afterImageRow = afterImageCell.position.row\r\n    afterImageCol = afterImageCell.position.column\r\n  }\r\n\r\n  // Get the chips from the board to render. This way the chip at the top of the board is the same\r\n  // dom element that gets placed in the correct position and it has a smooth transition\r\n  const chips = useMemo(() => {\r\n    const chipsInBoard = board\r\n      .flat()\r\n      .map((cell) => cell.chip)\r\n      .filter((chip) => chip) as Chip[]\r\n\r\n    if (canPlay) {\r\n      chipsInBoard.push(placementChip)\r\n    }\r\n\r\n    return chipsInBoard\r\n  }, [board, placementChip, canPlay])\r\n\r\n  // Let the initial cell animation finish showing all the cells before allowing the player to play\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setCanPlay(true)\r\n    }, cellStartAnimationDuration * 6 * 7)\r\n  }, [])\r\n\r\n  const gameEnded = (finalMessage: string) => {\r\n    setCanPlay(false)\r\n\r\n    // Let the piece finish fall before showing the winning player\r\n    setTimeout(() => {\r\n      window.confirm(finalMessage)\r\n\r\n      // Game is over, reset and go back to allow the player to be a different color\r\n      resetBoard(board)\r\n      setPage(Page.PlayerSelection)\r\n    }, 600)\r\n  }\r\n\r\n  const onSelectColumn = (column: number) => {\r\n    const cell = getPlacementCell(board, column)\r\n\r\n    // Only continue if the column isn't full\r\n    if (cell) {\r\n      placementChip.place(cell.position.row, cell.position.column)\r\n      cell.chip = placementChip\r\n\r\n      const gameState = getGameState(board)\r\n\r\n      switch (gameState) {\r\n        case GameState.Playing: {\r\n          break\r\n        }\r\n        case GameState.RedPlayerWins: {\r\n          gameEnded('RED won!')\r\n          return\r\n        }\r\n        case GameState.BluePlayerWins: {\r\n          gameEnded('BLUE won!')\r\n          return\r\n        }\r\n        case GameState.Tie: {\r\n          gameEnded('Game was a TIE!')\r\n          return\r\n        }\r\n        default:\r\n          break\r\n      }\r\n\r\n      // Let the next player go\r\n      const nextPlayer = getNextPlayer(currentPlayer)\r\n      setPlacementChip(new Chip(nextPlayer))\r\n      setCurrentPlayer(nextPlayer)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Root>\r\n      <Columns>\r\n        {board.map((column, columnIndex) => (\r\n          <Column key={columnIndex}>\r\n            {column.map((cell, rowIndex) => (\r\n              <CellContainer\r\n                key={rowIndex}\r\n                position={cell.position}\r\n                hideOutline={Boolean(cell.chip && !cell.chip.isPlacing)}\r\n                showAfterImage={\r\n                  mouseInArea &&\r\n                  afterImageRow === rowIndex &&\r\n                  afterImageCol === columnIndex\r\n                }\r\n                afterImagePlayer={currentPlayer}\r\n              />\r\n            ))}\r\n          </Column>\r\n        ))}\r\n      </Columns>\r\n      {chips.map((chip) => (\r\n        <ChipContainer key={chip.id} chip={chip} targetColumn={hoveredColumn} />\r\n      ))}\r\n      {canPlay && (\r\n        <SelectionOverlay\r\n          onMouseEnter={() => setMouseInArea(true)}\r\n          onMouseLeave={() => setMouseInArea(false)}\r\n        >\r\n          {board.map((_, index) => (\r\n            <SelectionColumn\r\n              key={index}\r\n              onMouseEnter={() => setHoveredColumn(index)}\r\n              onClick={() => onSelectColumn(index)}\r\n            />\r\n          ))}\r\n        </SelectionOverlay>\r\n      )}\r\n    </Root>\r\n  )\r\n}\r\n\r\nexport default Board\r\n","import { PlayerColor } from './enums'\r\n\r\nexport const getNextPlayer = (player: PlayerColor) => {\r\n  if (player === PlayerColor.Red) {\r\n    return PlayerColor.Blue\r\n  }\r\n\r\n  return PlayerColor.Red\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Board from './Board'\r\nimport { animated, useSpring } from 'react-spring'\r\nimport { Page, PlayerColor } from '../utils/enums'\r\n\r\nconst PageContainer = styled(animated.div)`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst PlayerSelection = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\nconst Title = styled.div`\r\n  font-size: 72px;\r\n  font-weight: 600;\r\n  margin-bottom: 70px;\r\n  background: linear-gradient(\r\n    48deg,\r\n    rgba(255, 16, 16, 1) 0%,\r\n    rgba(59, 1, 255, 1) 100%\r\n  );\r\n  -webkit-background-clip: text;\r\n  background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n`\r\n\r\nconst Buttons = styled.div`\r\n  display: flex;\r\n  margin-top: 20px;\r\n`\r\n\r\nconst ColorButton = styled.button`\r\n  background: transparent;\r\n  border: 1px solid #bebebe;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  padding: 12px 24px;\r\n  transition: 200ms background-color;\r\n  :hover {\r\n    background-color: #efefef;\r\n  }\r\n  :not(:first-child) {\r\n    margin-left: 12px;\r\n  }\r\n`\r\n\r\ntype Props = {}\r\n\r\n// Rudimentary switch-based pathing\r\nexport const Routes: React.FC<Props> = (props) => {\r\n  const [page, setPage] = useState(Page.PlayerSelection)\r\n  const [firstPlayerColor, setFirstPlayerColor] = useState<PlayerColor | null>(\r\n    null\r\n  )\r\n\r\n  // Fade in the title screen\r\n  const playerSelectionProps = useSpring({\r\n    to: {\r\n      opacity: 1,\r\n    },\r\n    from: {\r\n      opacity: 0,\r\n    },\r\n  })\r\n\r\n  let pageComponent = null\r\n\r\n  const onSelectColor = (color: PlayerColor) => {\r\n    setFirstPlayerColor(color)\r\n    setPage(Page.Game)\r\n  }\r\n\r\n  switch (page) {\r\n    case Page.PlayerSelection: {\r\n      pageComponent = (\r\n        <PageContainer style={playerSelectionProps}>\r\n          <Title>Connect Four</Title>\r\n          <PlayerSelection>\r\n            Player 1 - Please choose your color\r\n            <Buttons>\r\n              <ColorButton onClick={() => onSelectColor(PlayerColor.Red)}>\r\n                Red\r\n              </ColorButton>\r\n              <ColorButton onClick={() => onSelectColor(PlayerColor.Blue)}>\r\n                Blue\r\n              </ColorButton>\r\n            </Buttons>\r\n          </PlayerSelection>\r\n        </PageContainer>\r\n      )\r\n      break\r\n    }\r\n    case Page.Game: {\r\n      if (firstPlayerColor) {\r\n        pageComponent = (\r\n          <Board firstPlayerColor={firstPlayerColor} setPage={setPage} />\r\n        )\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  return pageComponent\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\nimport Routes from './components/Routes'\n\nimport styled, { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`\n\nconst Root = styled.div`\n  display: flex;\n  text-align: center;\n  height: 100vh;\n`\nconst Game = styled.div`\n  display: flex;\n  flex: 1 1 auto;\n  justify-content: center;\n  align-items: center;\n`\n\nconst GameArea = styled.div`\n  position: relative;\n  display: flex;\n`\n\nconst App: React.FC = () => {\n  return (\n    <Root>\n      <GlobalStyle />\n      <Game>\n        <GameArea>\n          <Routes />\n        </GameArea>\n      </Game>\n    </Root>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}