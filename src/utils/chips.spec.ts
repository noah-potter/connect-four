import { getGameState } from './chips'
import { Cell } from '../types'
import { PlayerEnum, GameState } from '../enums'
import Chip from '../data/Chip'

const getBlankBoard = () => {
  const board: Cell[][] = []

  for (let col = 0; col < 7; col++) {
    board.push([])

    for (let row = 0; row < 6; row++) {
      const cell = {
        pos: {
          row: row,
          col: col,
        },
        chip: undefined,
      } as Cell

      board[col].push(cell)
    }
  }

  return board
}

const createBoard = (template: string) => {
  const board = getBlankBoard()

  const str = template.replace(/[^\.^X^O]/g, '').split('')

  str.forEach((character, index) => {
    let player

    if (character === 'X') {
      player = PlayerEnum.First
    } else if (character === 'O') {
      player = PlayerEnum.Second
    }

    if (player) {
      const row = Math.floor(index / 7)
      const col = index % 7

      const chip = new Chip(player)
      chip.place(row, col)

      board[col][row].chip = chip
    }
  })

  return board
}

describe('isGameOver', () => {
  let boardSetup: string
  let board: Cell[][]

  it('works none wins', () => {
    boardSetup = `
      XXX....
      .......
      .......
      .......
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)

    boardSetup = `
      .......
      .......
      .......
      .......
      .......
      XXXO...
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)

    boardSetup = `
      ...XX.X
      .......
      .......
      .......
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)

    boardSetup = `
      .......
      .......
      ......O
      ......O
      ......X
      .....OO
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)
  })

  it('works for horizontal wins', () => {
    boardSetup = `
      XXXX...
      .......
      .......
      .......
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      .......
      .......
      .......
      XXXX...
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      ...XXXX
      .......
      .......
      .......
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      .......
      .......
      .......
      ...XXXX
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      ..XXXX.
      .......
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)
  })

  it('doesnt loop horizontally', () => {
    boardSetup = `
      XX...XX
      .......
      .......
      .......
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)

    boardSetup = `
      .......
      .......
      .......
      .......
      .......
      XX...XX
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)
  })

  it('works for vertical wins', () => {
    boardSetup = `
      X......
      X......
      X......
      X......
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      X......
      X......
      X......
      X......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      ......X
      ......X
      ......X
      ......X
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      ......X
      ......X
      ......X
      ......X
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)
  })

  it('doesnt loop vertically', () => {
    boardSetup = `
      ......X
      ......X
      .......
      .......
      ......X
      ......X
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)

    boardSetup = `
      X......
      X......
      .......
      .......
      X......
      X......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)
  })

  it('works for top left to bottom right diagonal wins', () => {
    boardSetup = `
      X......
      .X.....
      ..X....
      ...X...
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      ...X...
      ....X..
      .....X.
      ......X
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      X......
      .X.....
      ..X....
      ...X...
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      ...X...
      ....X..
      .....X.
      ......X
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)
  })

  it('doesnt loop top left to bottom right diagonal', () => {
    boardSetup = `
      .....X.
      ......X
      X......
      .X.....
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)
  })

  it('works for top right to bottom left diagonal wins', () => {
    boardSetup = `
      ......X
      .....X.
      ....X..
      ...X...
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      ...X...
      ..X....
      .X.....
      X......
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      ......X
      .....X.
      ....X..
      ...X...
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)

    boardSetup = `
      .......
      .......
      ...X...
      ..X....
      .X.....
      X......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.FirstPlayerWins)
  })

  it('doesnt loop top right to bottom left diagonal', () => {
    boardSetup = `
      .X.....
      X......
      ......X
      .....X.
      .......
      .......
    `
    board = createBoard(boardSetup)
    expect(getGameState(board)).toBe(GameState.Playing)
  })
})
